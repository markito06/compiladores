/* Generated By:JavaCC: Do not edit this line. langXConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface langXConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int CLASS = 13;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int EXTENDS = 16;
  /** RegularExpression Id. */
  int FINAL = 17;
  /** RegularExpression Id. */
  int PUBLIC = 18;
  /** RegularExpression Id. */
  int PRIVATE = 19;
  /** RegularExpression Id. */
  int PROTECTED = 20;
  /** RegularExpression Id. */
  int FOR = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int INT = 23;
  /** RegularExpression Id. */
  int STRING = 24;
  /** RegularExpression Id. */
  int CHAR = 25;
  /** RegularExpression Id. */
  int BOOLEAN = 26;
  /** RegularExpression Id. */
  int BYTE = 27;
  /** RegularExpression Id. */
  int SHORT = 28;
  /** RegularExpression Id. */
  int LONG = 29;
  /** RegularExpression Id. */
  int AND = 30;
  /** RegularExpression Id. */
  int OR = 31;
  /** RegularExpression Id. */
  int XOR = 32;
  /** RegularExpression Id. */
  int NOT = 33;
  /** RegularExpression Id. */
  int DOUBLE = 34;
  /** RegularExpression Id. */
  int NEW = 35;
  /** RegularExpression Id. */
  int PRINT = 36;
  /** RegularExpression Id. */
  int READ = 37;
  /** RegularExpression Id. */
  int RETURN = 38;
  /** RegularExpression Id. */
  int SUPER = 39;
  /** RegularExpression Id. */
  int WHILE = 40;
  /** RegularExpression Id. */
  int DO = 41;
  /** RegularExpression Id. */
  int SWITCH = 42;
  /** RegularExpression Id. */
  int CASE = 43;
  /** RegularExpression Id. */
  int DEFAULT_CASE = 44;
  /** RegularExpression Id. */
  int int_constant = 45;
  /** RegularExpression Id. */
  int float_constant = 46;
  /** RegularExpression Id. */
  int string_constant = 47;
  /** RegularExpression Id. */
  int boolean_constant = 48;
  /** RegularExpression Id. */
  int char_constant = 49;
  /** RegularExpression Id. */
  int null_constant = 50;
  /** RegularExpression Id. */
  int byte_constant = 51;
  /** RegularExpression Id. */
  int IDENT = 52;
  /** RegularExpression Id. */
  int LETTER = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;
  /** RegularExpression Id. */
  int LPAREN = 55;
  /** RegularExpression Id. */
  int RPAREN = 56;
  /** RegularExpression Id. */
  int LBRACE = 57;
  /** RegularExpression Id. */
  int RBRACE = 58;
  /** RegularExpression Id. */
  int LBRACKET = 59;
  /** RegularExpression Id. */
  int RBRACKET = 60;
  /** RegularExpression Id. */
  int SEMICOLON = 61;
  /** RegularExpression Id. */
  int COMMA = 62;
  /** RegularExpression Id. */
  int DOT = 63;
  /** RegularExpression Id. */
  int COLON = 64;
  /** RegularExpression Id. */
  int ASSIGN = 65;
  /** RegularExpression Id. */
  int GT = 66;
  /** RegularExpression Id. */
  int LT = 67;
  /** RegularExpression Id. */
  int EQ = 68;
  /** RegularExpression Id. */
  int LE = 69;
  /** RegularExpression Id. */
  int GE = 70;
  /** RegularExpression Id. */
  int NEQ = 71;
  /** RegularExpression Id. */
  int PLUS = 72;
  /** RegularExpression Id. */
  int MINUS = 73;
  /** RegularExpression Id. */
  int STAR = 74;
  /** RegularExpression Id. */
  int SLASH = 75;
  /** RegularExpression Id. */
  int REM = 76;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 77;
  /** RegularExpression Id. */
  int INVALID_CONST = 78;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"//\"",
    "\"*/\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "<token of kind 11>",
    "<BREAK>",
    "<CLASS>",
    "<CONSTRUCTOR>",
    "<ELSE>",
    "<EXTENDS>",
    "<FINAL>",
    "<PUBLIC>",
    "<PRIVATE>",
    "<PROTECTED>",
    "<FOR>",
    "<IF>",
    "<INT>",
    "<STRING>",
    "<CHAR>",
    "<BOOLEAN>",
    "<BYTE>",
    "<SHORT>",
    "<LONG>",
    "<AND>",
    "<OR>",
    "<XOR>",
    "<NOT>",
    "<DOUBLE>",
    "<NEW>",
    "<PRINT>",
    "<READ>",
    "<RETURN>",
    "<SUPER>",
    "<WHILE>",
    "<DO>",
    "<SWITCH>",
    "<CASE>",
    "<DEFAULT_CASE>",
    "<int_constant>",
    "<float_constant>",
    "<string_constant>",
    "<boolean_constant>",
    "<char_constant>",
    "<null_constant>",
    "<byte_constant>",
    "<IDENT>",
    "<LETTER>",
    "<DIGIT>",
    "<LPAREN>",
    "<RPAREN>",
    "<LBRACE>",
    "<RBRACE>",
    "<LBRACKET>",
    "<RBRACKET>",
    "<SEMICOLON>",
    "<COMMA>",
    "<DOT>",
    "<COLON>",
    "<ASSIGN>",
    "<GT>",
    "<LT>",
    "<EQ>",
    "<LE>",
    "<GE>",
    "<NEQ>",
    "<PLUS>",
    "<MINUS>",
    "<STAR>",
    "<SLASH>",
    "<REM>",
    "<INVALID_LEXICAL>",
    "<INVALID_CONST>",
  };

}
